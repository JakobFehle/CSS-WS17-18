{
    "collab_server" : "",
    "contents" : "require(tidyverse)\nrequire(dplyr)\nlibrary(readr)\nlibrary(SentimentAnalysis)\nlibrary(SnowballC)\nlibrary(tm)\nlibrary(spikeslab)\nsource(\"r scripts/cleanTweetText.R\")\n\n\n\ntwitter_data<-read_csv(\"data/twitter_data.csv\", \n                        locale = locale())\n\n# Aufbereiten Twitter Datensatz\ntwitter_data<-twitter_data%>%filter(lang==\"de\" | lang == \"da\")\n\n#Entfernt alle Links (http(s) und alle Zeichen bis zum nächsten Leerzeichen)\ntwitter_data$text<-gsub(\"http[s]?://t\\\\.co/[^ ]{10}\",\"\",twitter_data$text)\ntwitter_data$text<-gsub(\"http.*[^\\\\s]+\",\"\",twitter_data$text)\n\n\n#Entfernt alle abgeschnittenen Links\ntwitter_data$text<-gsub(\"htt[p]?\\U2026\",\"\",twitter_data$text)\n\n#Entfernen von abgeschnittenen Tweets\nc\n\n# Aufbereiten für Random Sample\ntwitter_data<-twitter_data%>%mutate(sentimentScore=NA)\n\n# NUR FÜR EXCEL!\ntwitter_data$text<-gsub(\",\",\" \",twitter_data$text)\ntwitter_data$text<-gsub(\";\",\" \",twitter_data$text)\n\n# Random Sample\ntwitter_data_frac<-twitter_data%>%sample_n(1000, replace=FALSE)\ntwitter_data_frac<-twitter_data_frac%>%select(ID,sentimentScore,text)\n\nwrite.table(twitter_data_frac, \"data/Twitter_Sentiment_TrainData.csv\", sep = \",\")\n\n\n# Auswertung\n\n# Einlesen\ntwitter_data_sentiment<-read_delim(\"data/SentimentAnalyseDavid.csv\", \n                                   \";\", escape_double = FALSE, trim_ws = TRUE)\n\n# Spalten Säubern (ID leider verfälscht)\ntwitter_data_sentiment<-twitter_data_sentiment%>%select(-c(Nummer,ID))\n\n# Fehlerhaft bei ä,ü,ö\ntwitter_data_sentiment<-twitter_data_sentiment%>%mutate(text=cleanTweetText(text))\n\n# Säubern\ntwitter_data_sentiment$text<-gsub(\"http[s]?://t\\\\.co/[^ ]{10}\",\"\",twitter_data_sentiment$text)\ntwitter_data_sentiment$text<-gsub(\"http.*[^\\\\s]+\",\"\",twitter_data_sentiment$text)\ntwitter_data_sentiment$text<-gsub(\"htt[p]?\\U2026\",\"\",twitter_data_sentiment$text)\ntwitter_data_sentiment<-twitter_data_sentiment[!grepl(\"\\U2026\", twitter_data_sentiment$text),]\n\n# Nur Matches der Kreuzvalid.\ntwitter_data_sentiment_match<-twitter_data_sentiment%>%filter(isMatch ==\"1\")\n\n# Umwandeln der Scores in numeric mit \".\"\ntwitter_data_sentiment_match<-twitter_data_sentiment_match%>%mutate(sentimentScore = as.numeric(sub(\",\", \".\", sentimentScore, fixed = TRUE)))\n\n# Testweise join für orginalen Text\n# twitter_data_merge<-merge(x = twitter_data, y = twitter_data_sentiment, by = \"text\", all.x = TRUE)\n\n\nx<-transformIntoCorpus(twitter_data_sentiment_match$text)\nresponse<-as.numeric(as.character(twitter_data_sentiment_match$sentimentScore))\n\ndict<-generateDictionary(twitter_data_sentiment_match$text,response)\n\ndict<-generateDictionary(x,response,modelType = \"lasso\", filterTerms = NULL, control = list(),\n                         minWordLength = 3, sparsity = 0.9, weighting= function(x)\n                           tm::weightTfIdf(x, normalize = FALSE))\n",
    "created" : 1512916653140.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2136727576",
    "id" : "4A974DBA",
    "lastKnownWriteTime" : 1513542868,
    "last_content_update" : 1513542868862,
    "path" : "D:/GitHub/CSS-WS17-18/r scripts/sentimentSample.R",
    "project_path" : "r scripts/sentimentSample.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}