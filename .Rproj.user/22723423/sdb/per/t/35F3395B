{
    "collab_server" : "",
    "contents" : "source(\"parseCacm.R\")\nrequire(tidytext)\nrequire(tidyverse)\nrequire(stringr)\nrequire(dplyr)\nrequire(ggplot2)\nlibrary(gridExtra)\nlibrary(grid)\nlibrary(scales)\n\n# Dokumente mit parseCacm Funktion laden und anschlieÃend sÃ¤ubern\ncacm_docs<-parseCacm(\"cacm/cacm.all\")\n\n# Verändern des Datums in eine Jahresangabe\ncacm_docs<-cacm_docs%>%filter(ID!=0)%>%mutate(Date=as.numeric(str_extract(Date,pattern=\"[0-9]{4}\")))\n\n# Labeln von Datum als Jahr\ncolnames(cacm_docs)[4]<-\"Year\"\n\n\n# Plot articles per year\nggplot(data = cacm_docs) + geom_bar(mapping = aes(x = Year))\n\n# Type-Token Relation\ncacm_docs_fulltext<-cacm_docs%>%\n  mutate(allText=str_replace_all(paste(Title,Content,sep=\" \"),\n                                 pattern= \"NA\",\n                                 replacement= \"\"))\n\ncacm_fulltext_tokenized<-cacm_docs_fulltext%>%unnest_tokens(word,allText,to_lower = TRUE)%>%select(ID,word)\n\ntype_vector<-cacm_fulltext_tokenized%>%group_by(ID)%>%unique%>%summarise(type=n())\ntoken_vector<-cacm_fulltext_tokenized%>%group_by(ID)%>%summarize(token= n())\ncacm_type_token<-full_join(type_vector, token_vector, by=\"ID\")\n\ncacm_type_token<-cacm_type_token%>%mutate(relation=token/type)\n\nggplot(data = cacm_type_token, aes(x=type,y=token))+\n  geom_point()+\n    geom_abline(intercept = 0, slope = 1, color=\"red\",linetype=\"dashed\", size=0.5)\n\n#### Artikel ohne Volltext/Autor\n# Volltext\n(nrow(cacm_docs%>%filter(is.na(Content)))/nrow(cacm_docs))*100\n\n# Per Year\ncacm_docs_without_abstract<-cacm_docs%>%filter(is.na(Content))\nggplot(data = cacm_docs_without_abstract) + geom_bar(mapping = aes(x = Year))\n\n# Autor\n(nrow(cacm_docs%>%filter(is.na(Autor)))/nrow(cacm_docs))*100\n\n\n\n#### Durchschnittliche Wortzahl Titel / Volltext\n\n#### Anzahl Dokumente \ncacm_docs_docCount<-cacm_docs%>%nrow()\n\n#### Titel + Volltext\n# Wörter sind nicht Tokenized! Trennung nach leerzeichen\ncacm_docs_catchall<-cacm_docs%>%\n  mutate(allText=str_replace_all(paste(Title,Content,sep=\" \"),\n                                 pattern= \"NA\",\n                                 replacement= \"\"))\ncacm_docs_catchall<-cacm_docs_catchall%>%subset(select= c(allText))\nsum(str_count(cacm_docs_catchall$allText,'\\\\S+'))/cacm_docs_docCount\n\n#### Titel\ncacm_docs_title<-cacm_docs%>%subset(select= Title)\nsum(str_count(cacm_docs_title$Title,'\\\\S+'))/cacm_docs_docCount\n\n#### Volltext\ncacm_docs_abstract<-cacm_docs%>%subset(select= c(Content))\n\n# Löschen von Leeren volltexten\ncacm_docs_abstract<-na.omit(cacm_docs_abstract)\n\n# Errechnen des Durchschnitts pro Dokument\nsum(str_count(cacm_docs_abstract$Content, '\\\\S+'))/cacm_docs_docCount\n\n# Errechnen des Durchschnitts pro Dokument mit Volltext\nsum(str_count(cacm_docs_abstract$Content, '\\\\S+'))/(cacm_docs_abstract%>%nrow())\n\n\n#### Relative Worthäufigkeit und Rang\n\n# Selektieren der Wort-Tokens\ntokenizedWords<-cacm_docs_fulltext%>%unnest_tokens(word,allText,to_lower = TRUE)%>%select(word)\n\n# Zahlen entfernen\ntokenizedWords<-tokenizedWords%>%filter(!grepl(\"[[:digit:]]\", word))\n\n# Ermitteln der absoluten und relativen Worthäufigkeit pro Wort\nfrequencyPerWord<-tokenizedWords%>%count(word)%>%mutate(prop = prop.table(n))\n\n# Absteigend Sortieren\nfrequencyPerWord<-arrange(frequencyPerWord,desc(n))\n\n# Aufsteigende Ränge einfügen\nfrequencyPerWord$rank<-seq.int(nrow(frequencyPerWord))\n\n# Scatterplot erzeugen\nggplotRel<-ggplot(data = frequencyPerWord, aes(x=rank,y=prop))+geom_point()+\n  theme(panel.border = element_rect(linetype = \"dashed\", fill = NA))+\n  ylab('rel word freq')+xlab('rank')+\n  labs(title= \"Relative word frequency combined with its rank\")\n\n## Absolute Worthäufigkeit und Rang\nggplotAbs<-ggplot(data = frequencyPerWord, aes(x=rank,y=n))+geom_point()+\n  theme(panel.border = element_rect(linetype = \"dashed\", fill = NA))+\n  ylab('abs word freq')+xlab('rank')+\n  scale_y_log10(breaks=c(1,10,100,1000,10000))+\n  scale_x_log10()+\n  labs(title= \"Absolute term frequency combined with its rank\")\n\ngrid.arrange(ggplotRel,ggplotAbs)\n",
    "created" : 1512407933358.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4081023364",
    "id" : "35F3395B",
    "lastKnownWriteTime" : 1506653774,
    "last_content_update" : 1506653774,
    "path" : "J:/R/cacm_docs_analysis.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}