twitter_data<-twitter_data_cleaned<-twitter_data%>%filter(lang=="de" | lang == "da")
#Entfernt alle Links (http(s) und alle Zeichen bis zum nächsten Leerzeichen)
twitter_data$text<-twitter_data_cleaned$text<-gsub("http[s]?://t\\.co/[^ ]{10}","",twitter_data_cleaned$text)
twitter_data$text<-twitter_data_cleaned$text<-gsub("http.*[^\\s]+","",twitter_data_cleaned$text)
twitter_data$text<-twitter_data_cleaned$text<-gsub("https","",twitter_data_cleaned$text)
twitter_data$text<-twitter_data_cleaned$text<-gsub("http","",twitter_data_cleaned$text)
#Entfernt alle abgeschnittenen Links
twitter_data$text<-twitter_data_cleaned$text<-gsub("htt[p]?\U2026","",twitter_data$text)
#Entfernen von abgeschnittenen Tweets
twitter_data<-twitter_data_cleaned<-twitter_data[!grepl("\U2026", twitter_data$text),]
#CleanTweetText auf den gesamten Twitter Datensatz
twitter_data<-twitter_data%>%mutate(text=cleanCorpus(text))
twitter_data$text<-gsub("<[^\\s]+>","",twitter_data$text)
twitter_data_cleaned<-twitter_data_cleaned%>%mutate(text=cleanTweetText(text))
twitter_data_cleaned$text<-gsub("[^[:graph:]]"," ",twitter_data_cleaned$text)
twitter_data_cleaned$text<-iconv(twitter_data_cleaned$text, 'UTF-8','ASCII')
twitter_data_cleaned$text<-apply(twitter_data_cleaned[,"text"],1,function(x) stemTweetText(x))
twitter_data$text<-gsub("[^[:graph:]]"," ",twitter_data$text)
View(twitter_data_cleaned)
twitter_data2<-read_csv("twitter data/twitter_data.csv",
locale = locale())
twitter_data22<-transformIntoCorpus(twitter_data2)
twitter_data22<-transformIntoCorpus(twitter_data2$text)
twitter_data22<-preprocessCorpus(twitter_data22,language = "german",stemming = FALSE, removeStopwords = TRUE)
twitter_data_sentiment<-read_delim("twitter data/SentimentAnalyse#1.csv",";"
,escape_double = FALSE, trim_ws =TRUE,
locale = locale())
twitter_data_sentiment_david_snd<-read_delim("data/SentimentAnalyseDavidzweiterDurchlauf.csv",";"
,escape_double = FALSE, trim_ws =TRUE,
locale = locale())
twitter_data_sentiment_jakob_snd<-read_delim("twitter data/SentimentAnalyse#2.csv",
";", escape_double = FALSE, trim_ws = TRUE,
locale = locale())
colnames(twitter_data_sentiment_david_snd)<-c("sentimentScore","text")
twitter_data_sentiment<-twitter_data_sentiment%>%select(-c(ID))
twitter_data_sentiment_jakob_snd<-twitter_data_sentiment_jakob_snd%>%select(-c(X1,ID,positveSentimentScore,negativeSentimentScore))
twitter_data_sentiment_jakob_snd<-twitter_data_sentiment_jakob_snd%>%filter(sentimentScore != "NA")
twitter_data_sentiment_jakob_snd$isMatch<-"1"
twitter_data_sentiment_david_snd$isMatch<-"1"
twitter_data_sentiment<-rbind(twitter_data_sentiment,twitter_data_sentiment_jakob_snd,twitter_data_sentiment_david_snd)
twitter_data_sentiment<-twitter_data_sentiment%>%mutate(text=cleanTweetText(text))
# Umwandeln der Scores in numeric mit "."
twitter_data_sentiment<-twitter_data_sentiment%>%filter(sentimentScore != "NA")
twitter_data_sentiment<-twitter_data_sentiment%>%filter(text != "")
twitter_data_sentiment<-twitter_data_sentiment%>%mutate(sentimentScore = sub(",", ".", sentimentScore, fixed = TRUE))
twitter_data_sentiment$sentimentScore<-as.numeric(as.character(twitter_data_sentiment$sentimentScore))
# Stemming
twitter_data_sentiment$text<-apply(twitter_data_sentiment[,"text"],1,function(x) stemTweetText(x))
###
# Cleaning Functions Changed often for different Cleaning approaches of different Imported Data
###
cleanTweetText<-function(text){
require(stringr)
require(stringi)
library(tm)
library(SnowballC)
hashtag_pattern <- "#([[:alnum:]]|[_])+"
mention_pattern <- "@([[:alnum:]]|[_])+"
strip_RT_pattern<-"RT\\s@([[:alnum:]]|[_])+:"
text<-gsub("<e4>","ae",text)
text<-gsub("<c4>","Ae",text)
text<-gsub("<d6>","Oe",text)
text<-gsub("<dc>","UE",text)
text<-gsub("<f6>","oe",text)
text<-gsub("<fc>","ue",text)
text<-gsub("<df>","ss",text)
text<-gsub("ß","ss",text)
text<-gsub("\U00DF","ss",text)
text<-gsub("\U00E3","ae",text)
text<-gsub("<[^\\s]+>","",text)
text<-gsub("<[^\\s]+","",text)
text<-gsub("&amp;"," ",text)
text<-gsub("&amp"," ",text)
text<-gsub(" amp "," ",text)
text<-gsub("http[s]?\\://t\\.co/[^ ]{10}","",text)
text<-gsub("http.*[^\\s]+","",text)
text<-gsub("htt[p]?\U2026","",text)
text<-gsub("https","",text)
text<-gsub("http","",text)
text<-ifelse(grepl("\U2026",text),"",text)
#Die URLs und Mentions werden entfernt
text<-str_replace_all(text,pattern=mention_pattern,replacement="")
#Wörter die weniger als 3 Zeichen haben müssen weg außer sie haben #
text<-str_replace_all(text,pattern="(?<!#)\\b[a-zA-Z0-9]{1,2}\\b",replacement = "")
#depends on whether you wanna keep hashtags or not
text<-str_replace_all(text,pattern="#",replacement="")
#Konvertierung von Umlauten
text<-stri_replace_all_fixed(text,
#c("?", "?", "?", "?", "?", "?"),
c("\U00E4","\U00F6","\U00FC","\U00C4","\U00D6","\U00DC"),
c("ae", "oe", "ue", "Ae", "Oe", "Ue"), vectorize_all = FALSE)
#Zahlen außer IN Hashtags
text<-str_replace_all(text,pattern="\\b\\d+\\b",replacement="")
#Satzzeichen und Special Characters außer # müssen weg
text<-str_replace_all(text,pattern="[^[:alnum:]#]",replacement=" ")
text<-str_to_lower(text)
text<-gsub("\\s+", " ",text)
text<-sub("\\s+$", "", text)
#text<-substr(text, 1, 30)
return(text)
}
cleanTweetText("gute amp richtige entscheidung")
stemTweetText<-function(text){
require(stringr)
require(stringi)
library(tm)
library(SnowballC)
text<-as.character(text)
text<-strsplit(text," ")
words<-unlist(text)
words<-words[words!=""]
words<-wordStem(words,language="german")
words<-paste(words,collapse=" ")
return(words)
}
cleanCorpus<-function(text){
require(stringr)
require(stringi)
text<-gsub("<e4>","ä",text)
text<-gsub("<c4>","Ä",text)
text<-gsub("<d6>","Ö",text)
text<-gsub("<dc>","Ü",text)
text<-gsub("<f6>","ö",text)
text<-gsub("<fc>","ü",text)
text<-gsub("<df>","ss",text)
text<-gsub("ß","ss",text)
text<-gsub("<[^\\s]+>","",text)
text<-gsub("<[^\\s]+","",text)
text<-gsub("\U00E3","ä",text)
text<-gsub("&amp;"," ",text)
text<-gsub("&amp"," ",text)
text<-gsub(" amp "," ",text)
text<-stri_replace_all_fixed(text,
#c("?", "?", "?", "?", "?", "?"),
c("\U00E4","\U00F6","\U00FC","\U00C4","\U00D6","\U00DC"),
c("ae", "oe", "ue", "Ae", "Oe", "Ue"), vectorize_all = FALSE)
text<-str_replace_all(text,pattern="[^[:alnum:]\\#|\\@]",replacement=" ")
text<-gsub("\\s+", " ",text)
return(text)
}
cleanTextForMerge<-function(text){
mention_pattern <- "@([[:alnum:]]|[_])+"
text<-gsub("<e4>","ae",text)
text<-gsub("<c4>","Ae",text)
text<-gsub("<d6>","Oe",text)
text<-gsub("<dc>","UE",text)
text<-gsub("<f6>","oe",text)
text<-gsub("<fc>","ue",text)
text<-gsub("<df>","ss",text)
text<-gsub("ß","ss",text)
text<-gsub("\U00DF","ss",text)
text<-gsub("\U00E3","ae",text)
text<-gsub("<[^\\s]+>","",text)
text<-gsub("<[^\\s]+","",text)
text<-gsub("&amp;"," ",text)
text<-gsub("&amp"," ",text)
text<-gsub(" amp "," ",text)
text<-gsub("http[s]?\\://t\\.co/[^ ]{10}","",text)
text<-gsub("http.*[^\\s]+","",text)
text<-gsub("htt[p]?\U2026","",text)
text<-gsub("https","",text)
text<-gsub("http","",text)
text<-gsub("\U2026","",text)
#Die URLs und Mentions werden entfernt
text<-str_replace_all(text,pattern=mention_pattern,replacement="")
#Wörter die weniger als 3 Zeichen haben müssen weg außer sie haben #
text<-str_replace_all(text,pattern="(?<!#)\\b[a-zA-Z0-9]{1,2}\\b",replacement = "")
#depends on whether you wanna keep hashtags or not
text<-str_replace_all(text,pattern="#",replacement="")
#Konvertierung von Umlauten
text<-stri_replace_all_fixed(text,
#c("?", "?", "?", "?", "?", "?"),
c("\U00E4","\U00F6","\U00FC","\U00C4","\U00D6","\U00DC"),
c("ae", "oe", "ue", "Ae", "Oe", "Ue"), vectorize_all = FALSE)
#Zahlen außer IN Hashtags
text<-str_replace_all(text,pattern="\\b\\d+\\b",replacement="")
#Satzzeichen und Special Characters außer # müssen weg
text<-str_replace_all(text,pattern="[^[:alnum:]#]",replacement=" ")
text<-str_to_lower(text)
text<-gsub("\\s+", " ",text)
text<-sub("\\s+$", "", text)
#text<-substr(text, 1, 30)
return(text)
}
twitter_data_sentiment<-read_delim("twitter data/SentimentAnalyse#1.csv",";"
,escape_double = FALSE, trim_ws =TRUE,
locale = locale())
twitter_data_sentiment_david_snd<-read_delim("data/SentimentAnalyseDavidzweiterDurchlauf.csv",";"
,escape_double = FALSE, trim_ws =TRUE,
locale = locale())
twitter_data_sentiment_jakob_snd<-read_delim("twitter data/SentimentAnalyse#2.csv",
";", escape_double = FALSE, trim_ws = TRUE,
locale = locale())
colnames(twitter_data_sentiment_david_snd)<-c("sentimentScore","text")
twitter_data_sentiment<-twitter_data_sentiment%>%select(-c(ID))
twitter_data_sentiment_jakob_snd<-twitter_data_sentiment_jakob_snd%>%select(-c(X1,ID,positveSentimentScore,negativeSentimentScore))
twitter_data_sentiment_jakob_snd<-twitter_data_sentiment_jakob_snd%>%filter(sentimentScore != "NA")
twitter_data_sentiment_jakob_snd$isMatch<-"1"
twitter_data_sentiment_david_snd$isMatch<-"1"
twitter_data_sentiment<-rbind(twitter_data_sentiment,twitter_data_sentiment_jakob_snd,twitter_data_sentiment_david_snd)
twitter_data_sentiment<-twitter_data_sentiment%>%mutate(text=cleanTweetText(text))
# Umwandeln der Scores in numeric mit "."
twitter_data_sentiment<-twitter_data_sentiment%>%filter(sentimentScore != "NA")
twitter_data_sentiment<-twitter_data_sentiment%>%filter(text != "")
twitter_data_sentiment<-twitter_data_sentiment%>%mutate(sentimentScore = sub(",", ".", sentimentScore, fixed = TRUE))
twitter_data_sentiment$sentimentScore<-as.numeric(as.character(twitter_data_sentiment$sentimentScore))
View(twitter_data_sentiment)
twitter_data_sentiment$text<-apply(twitter_data_sentiment[,"text"],1,function(x) stemTweetText(x))
View(twitter_data_sentiment)
twitter_data_sentiment_match<-twitter_data_sentiment%>%filter(isMatch =="1")
twitter_data<-read_csv("twitter data/twitter_data.csv",
locale = locale())
# Aufbereiten Twitter Datensatz
twitter_data<-twitter_data_cleaned<-twitter_data%>%filter(lang=="de" | lang == "da")
#Entfernt alle Links (http(s) und alle Zeichen bis zum nächsten Leerzeichen)
twitter_data$text<-twitter_data_cleaned$text<-gsub("http[s]?://t\\.co/[^ ]{10}","",twitter_data_cleaned$text)
twitter_data$text<-twitter_data_cleaned$text<-gsub("http.*[^\\s]+","",twitter_data_cleaned$text)
twitter_data$text<-twitter_data_cleaned$text<-gsub("https","",twitter_data_cleaned$text)
twitter_data$text<-twitter_data_cleaned$text<-gsub("http","",twitter_data_cleaned$text)
twitter_data$text<-twitter_data_cleaned$text<-gsub("htt[p]?\U2026","",twitter_data$text)
twitter_data<-twitter_data_cleaned<-twitter_data[!grepl("\U2026", twitter_data$text),]
twitter_data<-twitter_data%>%mutate(text=cleanCorpus(text))
twitter_data$text<-gsub("<[^\\s]+>","",twitter_data$text)
twitter_data_cleaned<-twitter_data_cleaned%>%mutate(text=cleanTweetText(text))
twitter_data<-twitter_data%>%mutate(text=cleanCorpus(text))
View(twitter_data_cleaned)
twitter_data_cleaned<-twitter_data_cleaned%>%mutate(text=cleanTweetText(text))
View(twitter_data_cleaned)
View(twitter_data_cleaned)
twitter_data_cleaned$text<-gsub("[^[:graph:]]"," ",twitter_data_cleaned$text)
twitter_data_cleaned$text<-iconv(twitter_data_cleaned$text, 'UTF-8','ASCII')
twitter_data$text<-gsub("[^[:graph:]]"," ",twitter_data$text)
View(twitter_data_cleaned)
twitter_data_cleaned$text<-apply(twitter_data_cleaned[,"text"],1,function(x) stemTweetText(x))
gr<-grepl("",twitter_data_cleaned$text)
gr
gr<-grepl(NA,twitter_data_cleaned$text)
gr
gr<-twitter_data_cleaned$text!=""
gr
gr<-twitter_data_cleaned$text!="NA"
twitter_data_cleaned[224,1]
gr<-twitter_data_cleaned$text!=NA
gr
gr<-twitter_data_cleaned$text!="NA"
gr
twitter_data2<-twitter_data[gr,]
twitter_data<-twitter_data[gr,]
twitter_data_cleaned<-twitter_data_cleaned[gr,]
twitter_data_sentiment<-read_delim("twitter data/SentimentAnalyse#1.csv",";"
,escape_double = FALSE, trim_ws =TRUE,
locale = locale())
twitter_data_sentiment_david_snd<-read_delim("data/SentimentAnalyseDavidzweiterDurchlauf.csv",";"
,escape_double = FALSE, trim_ws =TRUE,
locale = locale())
twitter_data_sentiment_jakob_snd<-read_delim("twitter data/SentimentAnalyse#2.csv",
";", escape_double = FALSE, trim_ws = TRUE,
locale = locale())
colnames(twitter_data_sentiment_david_snd)<-c("sentimentScore","text")
twitter_data_sentiment<-twitter_data_sentiment%>%select(-c(ID))
twitter_data_sentiment_jakob_snd<-twitter_data_sentiment_jakob_snd%>%select(-c(X1,ID,positveSentimentScore,negativeSentimentScore))
twitter_data_sentiment_jakob_snd<-twitter_data_sentiment_jakob_snd%>%filter(sentimentScore != "NA")
twitter_data_sentiment_jakob_snd$isMatch<-"1"
twitter_data_sentiment_david_snd$isMatch<-"1"
twitter_data_sentiment<-rbind(twitter_data_sentiment,twitter_data_sentiment_jakob_snd,twitter_data_sentiment_david_snd)
twitter_data_sentiment<-twitter_data_sentiment%>%mutate(text=cleanTweetText(text))
twitter_data_sentiment<-twitter_data_sentiment%>%mutate(text=cleanTweetText(text))
View(twitter_data_sentiment)
# Umwandeln der Scores in numeric mit "."
twitter_data_sentiment<-twitter_data_sentiment%>%filter(sentimentScore != "NA")
twitter_data_sentiment<-twitter_data_sentiment%>%filter(text != "")
twitter_data_sentiment<-twitter_data_sentiment%>%mutate(sentimentScore = sub(",", ".", sentimentScore, fixed = TRUE))
twitter_data_sentiment$sentimentScore<-as.numeric(as.character(twitter_data_sentiment$sentimentScore))
# Stemming
twitter_data_sentiment$text<-apply(twitter_data_sentiment[,"text"],1,function(x) stemTweetText(x))
twitter_data_sentiment_match<-twitter_data_sentiment%>%filter(isMatch =="1")
twitter_data_sentiment_5lvl<-twitter_data_sentiment_match
twitter_data_sentiment_5lvl<-twitter_data_sentiment_5lvl%>%select("sentimentScore", "text")
write.csv(twitter_data_sentiment_5lvl, "data/SentimentAnalyse_5LevelDict.csv")
response5<-twitter_data_sentiment_5lvl$sentimentScore
x5<-transformIntoCorpus(twitter_data_sentiment_5lvl$text)
xDTM5<-toDocumentTermMatrix(x5, language = "german", minWordLength = 3,
sparsity = NULL, removeStopwords = TRUE, stemming = FALSE)
dict_lasso51<-generateDictionary(xDTM5,response5,modelType = "lasso", sparsity = 0.99999999, language = "german")
summary(dict_lasso51)
dict_lasso52<-generateDictionary(xDTM5,response5,modelType = "lasso", sparsity = 0.99999999, language = "german")
dict_lasso53<-generateDictionary(xDTM5,response5,modelType = "lasso", sparsity = 0.99999999, language = "german")
dict_lasso54<-generateDictionary(xDTM5,response5,modelType = "lasso", sparsity = 0.99999999, language = "german")
summary(dict_lasso52)
summary(dict_lasso53)
summary(dict_lasso54)
dict_lasso55<-generateDictionary(xDTM5,response5,modelType = "lasso", sparsity = 0.99999999, language = "german")
dict_lasso56<-generateDictionary(xDTM5,response5,modelType = "lasso", sparsity = 0.99999999, language = "german")
dict_lasso57<-generateDictionary(xDTM5,response5,modelType = "lasso", sparsity = 0.99999999, language = "german")
dict_lasso58<-generateDictionary(xDTM5,response5,modelType = "lasso", sparsity = 0.99999999, language = "german")
dict_lasso59<-generateDictionary(xDTM5,response5,modelType = "lasso", sparsity = 0.99999999, language = "german")
dict_lasso510<-generateDictionary(xDTM5,response5,modelType = "lasso", sparsity = 0.99999999, language = "german")
dict_lasso5<-generateDictionary(xDTM5,response5,modelType = "lasso", sparsity = 0.99999999, language = "german")
summary(dict_lasso55)
summary(dict_lasso56)
summary(dict_lasso57)
summary(dict_lasso58)
summary(dict_lasso59)
summary(dict_lasso5)
dict_lasso52<-generateDictionary(xDTM5,response5,modelType = "lasso", sparsity = 0.99999999, language = "german")
dict_lasso53<-generateDictionary(xDTM5,response5,modelType = "lasso", sparsity = 0.99999999, language = "german")
dict_lasso54<-generateDictionary(xDTM5,response5,modelType = "lasso", sparsity = 0.99999999, language = "german")
dict_lasso55<-generateDictionary(xDTM5,response5,modelType = "lasso", sparsity = 0.99999999, language = "german")
dict_lasso56<-generateDictionary(xDTM5,response5,modelType = "lasso", sparsity = 0.99999999, language = "german")
dict_lasso57<-generateDictionary(xDTM5,response5,modelType = "lasso", sparsity = 0.99999999, language = "german")
dict_lasso58<-generateDictionary(xDTM5,response5,modelType = "lasso", sparsity = 0.99999999, language = "german")
dict_lasso59<-generateDictionary(xDTM5,response5,modelType = "lasso", sparsity = 0.99999999, language = "german")
dict_lasso510<-generateDictionary(xDTM5,response5,modelType = "lasso", sparsity = 0.99999999, language = "german")
dict_lasso5<-generateDictionary(xDTM5,response5,modelType = "lasso", sparsity = 0.99999999, language = "german")
summary(dict_lasso5)
summary(dict_lasso52)
summary(dict_lasso53)
summary(dict_lasso54)
summary(dict_lasso55)
summary(dict_lasso56)
summary(dict_lasso57)
summary(dict_lasso58)
summary(dict_lasso59)
summary(dict_lasso510)
write(dict_lasso56, "dictionarys/lasso-5level.dict")
dict_enet51<-generateDictionary(xDTM5,response5,modelType = "enet", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_enet52<-generateDictionary(xDTM5,response5,modelType = "enet", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_enet53<-generateDictionary(xDTM5,response5,modelType = "enet", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_enet54<-generateDictionary(xDTM5,response5,modelType = "enet", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_enet55<-generateDictionary(xDTM5,response5,modelType = "enet", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_enet56<-generateDictionary(xDTM5,response5,modelType = "enet", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_enet57<-generateDictionary(xDTM5,response5,modelType = "enet", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_enet58<-generateDictionary(xDTM5,response5,modelType = "enet", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_enet59<-generateDictionary(xDTM5,response5,modelType = "enet", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_enet510<-generateDictionary(xDTM5,response5,modelType = "enet", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
summary(dict_enet51)
summary(dict_enet52)
summary(dict_enet53)
summary(dict_enet54)
summary(dict_enet55)
summary(dict_enet56)
summary(dict_enet57)
summary(dict_enet58)
summary(dict_enet59)
summary(dict_enet510)
dict_enet52
summary(dict_enet52)
write(dict_enet52, "dictionarys/enet-5level.dict")
dict_ridge5<-generateDictionary(xDTM5,response5,modelType = "ridge", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
summary(dict_ridge5)
plot(dict_ridge5)
write(dict_ridge5, "dictionarys/ridge-5level.dict")
ridge_5lvl<-read("dictionarys/ridge-5level.dict")
twitter_data1<-twitter_data[1:120000,]
twitter_data2<-twitter_data[120001:255307,]
twitter_data_cleaned1<-twitter_data_cleaned[1:120000,]
twitter_data_cleaned2<-twitter_data_cleaned[120001:255307,]
library(readr)
twitterDataBaselineWithAllDicts <- read_csv("D:/GitHub/CSS-WS17-18/twitter data/twitterDataBaselineWithAllDicts.csv",
locale = locale())
View(twitterDataBaselineWithAllDicts)
twitterDataBaselineWithAllDicts<-twitterDataBaselineWithAllDicts%>%mutate(text=cleanTweetText(text))
twitterDataBaselineWithAllDicts<-twitterDataBaselineWithAllDicts%>%mutate(text=cleanTweetText(text))
pred<-predict(ridge_5lvl,twitterDataBaselineWithAllDicts$text)
twitterDataBaselineWithAllDicts$ridge5NEW<-as.numeric(unlist(pred))
compareToResponse(pred,twitterDataBaselineWithAllDicts$sentimentScore)
compareToResponse(pred,as.numeric(twitterDataBaselineWithAllDicts$sentimentScore))
write(dict_ridge5, "dictionarys/ridge-5level.dict")
twitter_data_sentiment_3lvl<-twitter_data_sentiment_match%>%mutate(sentimentScore = sub("0.5","1.0", sentimentScore, fixed = TRUE))
twitter_data_sentiment_3lvl<-twitter_data_sentiment_3lvl%>%select("sentimentScore", "text")
twitter_data_sentiment_3lvl$sentimentScore<-as.numeric(as.character(twitter_data_sentiment_3lvl$sentimentScore))
write.csv(twitter_data_sentiment_3lvl, "data/SentimentAnalyse_3LevelDict")
x3<-transformIntoCorpus(twitter_data_sentiment_3lvl$text)
xDTM3<-toDocumentTermMatrix(x3, language = "german", minWordLength = 3,
sparsity = NULL, removeStopwords = TRUE, stemming = FALSE)
response3<-twitter_data_sentiment_3lvl$sentimentScore
dict_lasso31<-generateDictionary(xDTM3,response3,modelType = "lasso", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_lasso32<-generateDictionary(xDTM3,response3,modelType = "lasso", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_lasso33<-generateDictionary(xDTM3,response3,modelType = "lasso", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_lasso34<-generateDictionary(xDTM3,response3,modelType = "lasso", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_lasso35<-generateDictionary(xDTM3,response3,modelType = "lasso", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_lasso36<-generateDictionary(xDTM3,response3,modelType = "lasso", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_lasso37<-generateDictionary(xDTM3,response3,modelType = "lasso", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_lasso38<-generateDictionary(xDTM3,response3,modelType = "lasso", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_lasso39<-generateDictionary(xDTM3,response3,modelType = "lasso", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_lasso310<-generateDictionary(xDTM3,response3,modelType = "lasso", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
summary(dict_lasso31)
summary(dict_lasso32)
summary(dict_lasso33)
summary(dict_lasso34)
summary(dict_lasso35)
summary(dict_lasso36)
summary(dict_lasso37)
summary(dict_lasso38)
summary(dict_lasso39)
summary(dict_lasso310)
View(twitter_data_sentiment_3lvl)
write(dict_lasso38, "dictionarys/lasso-3level.dict")
dict_lasso38
dict_enet31<-generateDictionary(xDTM3,response3,modelType = "enet", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_enet32<-generateDictionary(xDTM3,response3,modelType = "enet", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_enet33<-generateDictionary(xDTM3,response3,modelType = "enet", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_enet34<-generateDictionary(xDTM3,response3,modelType = "enet", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_enet35<-generateDictionary(xDTM3,response3,modelType = "enet", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_enet36<-generateDictionary(xDTM3,response3,modelType = "enet", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_enet37<-generateDictionary(xDTM3,response3,modelType = "enet", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_enet38<-generateDictionary(xDTM3,response3,modelType = "enet", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_enet39<-generateDictionary(xDTM3,response3,modelType = "enet", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_enet310<-generateDictionary(xDTM3,response3,modelType = "enet", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
summary(dict_enet31)
summary(dict_enet32)
summary(dict_enet33)
summary(dict_enet34)
summary(dict_enet35)
summary(dict_enet36)
summary(dict_enet37)
summary(dict_enet38)
summary(dict_enet39)
summary(dict_enet310)
write(dict_enet35, "dictionarys/enet-3level.dict")
dict_enet35
summary(dict_enet35)
write(dict_enet35, "dictionarys/enet-3level.dict")
dict_ridge3<-generateDictionary(xDTM3,response3,modelType = "ridge", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
compareToResponse(predict(dict_lasso5,twitterDataBaselineWithAllDicts$text),as.numeric(twitterDataBaselineWithAllDicts$sentimentScore))
summary(dict_lasso5)
lasso_5lvl<-read("dictionarys/lasso-5level.dict")
compareToResponse(predict(lasso_5,twitterDataBaselineWithAllDicts$text),as.numeric(twitterDataBaselineWithAllDicts$sentimentScore))
compareToResponse(predict(lasso_5lvl,twitterDataBaselineWithAllDicts$text),as.numeric(twitterDataBaselineWithAllDicts$sentimentScore))
twitterDataBaselineWithAllDicts$lasso5NEW<-as.numeric(unlist(predict(lasso_5lvl,twitterDataBaselineWithAllDicts$text)))
twitterDataBaselineWithAllDicts<-twitterDataBaselineWithAllDicts%>%mutate(text=stemTweetText(text))
compareToResponse(predict(lasso_5lvl,twitterDataBaselineWithAllDicts$text),as.numeric(twitterDataBaselineWithAllDicts$sentimentScore))
twitterDataBaselineWithAllDicts$text<-apply(twitterDataBaselineWithAllDicts[,"text"],1,function(x) stemTweetText(x))
library(readr)
twitterDataBaselineWithAllDicts <- read_csv("D:/GitHub/CSS-WS17-18/twitter data/twitterDataBaselineWithAllDicts.csv",
locale = locale())
View(twitterDataBaselineWithAllDicts)
twitterDataBaselineWithAllDicts<-twitterDataBaselineWithAllDicts%>%mutate(text=cleanTweetText(text))
twitterDataBaselineWithAllDicts<-twitterDataBaselineWithAllDicts%>%mutate(text=cleanTweetText(text))
twitterDataBaselineWithAllDicts$text<-apply(twitterDataBaselineWithAllDicts[,"text"],1,function(x) stemTweetText(x))
compareToResponse(predict(lasso_5lvl,twitterDataBaselineWithAllDicts$text),as.numeric(twitterDataBaselineWithAllDicts$sentimentScore))
lasso_3lvl<-read("dictionarys/lasso-3level.dict")
compareToResponse(predict(lasso_3lvl,twitterDataBaselineWithAllDicts$text),as.numeric(twitterDataBaselineWithAllDicts$sentimentScore))
View(twitterDataBaselineWithAllDicts)
as.numeric(twitterDataBaselineWithAllDicts$sentimentScore)
twitterDataBaselineWithAllDicts<-twitterDataBaselineWithAllDicts%>%mutate(sentimentScore = sub(",", ".", sentimentScore, fixed = TRUE))
twitterDataBaselineWithAllDicts$sentimentScore<-as.numeric(as.character(twitterDataBaselineWithAllDicts$sentimentScore))
compareToResponse(predict(lasso_3lvl,twitterDataBaselineWithAllDicts$text),as.numeric(twitterDataBaselineWithAllDicts$sentimentScore))
compareToResponse(predict(lasso_5lvl,twitterDataBaselineWithAllDicts$text),as.numeric(twitterDataBaselineWithAllDicts$sentimentScore))
compareToResponse(predict(ridge_5lvl,twitterDataBaselineWithAllDicts$text),as.numeric(twitterDataBaselineWithAllDicts$sentimentScore))
compareToResponse(predict(enet_5lvl,twitterDataBaselineWithAllDicts$text),as.numeric(twitterDataBaselineWithAllDicts$sentimentScore))
summary(dict_ridge3)
write(dict_ridge3, "dictionarys/ridge-3level.dict")
twitter_data_sentiment_2lvl<-twitter_data_sentiment_match%>%mutate(sentimentScore = sub("0.5","1", sentimentScore, fixed = TRUE))
twitter_data_sentiment_2lvl<-twitter_data_sentiment_2lvl%>%filter(sentimentScore != 0)
twitter_data_sentiment_2lvl<-twitter_data_sentiment_2lvl%>%select("sentimentScore", "text")
twitter_data_sentiment_2lvl$sentimentScore<-as.numeric(as.character(twitter_data_sentiment_2lvl$sentimentScore))
write.csv(twitter_data_sentiment_2lvl, "data/SentimentAnalyse_2LevelDict")
x2<-transformIntoCorpus(twitter_data_sentiment_2lvl$text)
xDTM2<-toDocumentTermMatrix(x2, language = "german", minWordLength = 3,
sparsity = NULL, removeStopwords = TRUE, stemming = FALSE)
response2<-twitter_data_sentiment_2lvl$sentimentScore
dict_lasso21<-generateDictionary(xDTM2,response2,modelType = "lasso", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_lasso22<-generateDictionary(xDTM2,response2,modelType = "lasso", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_lasso23<-generateDictionary(xDTM2,response2,modelType = "lasso", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_lasso24<-generateDictionary(xDTM2,response2,modelType = "lasso", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_lasso25<-generateDictionary(xDTM2,response2,modelType = "lasso", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_lasso26<-generateDictionary(xDTM2,response2,modelType = "lasso", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_lasso27<-generateDictionary(xDTM2,response2,modelType = "lasso", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_lasso28<-generateDictionary(xDTM2,response2,modelType = "lasso", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_lasso29<-generateDictionary(xDTM2,response2,modelType = "lasso", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_lasso210<-generateDictionary(xDTM2,response2,modelType = "lasso", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
summary(dict_lasso21)
summary(dict_lasso22)
summary(dict_lasso23)
summary(dict_lasso24)
summary(dict_lasso25)
summary(dict_lasso26)
summary(dict_lasso27)
summary(dict_lasso28)
summary(dict_lasso29)
summary(dict_lasso210)
write(dict_lasso27, "dictionarys/lasso-2level.dict")
summary(dict_lasso27)
dict_enet21<-generateDictionary(xDTM2,response2,modelType = "enet", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_enet22<-generateDictionary(xDTM2,response2,modelType = "enet", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_enet23<-generateDictionary(xDTM2,response2,modelType = "enet", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_enet24<-generateDictionary(xDTM2,response2,modelType = "enet", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_enet25<-generateDictionary(xDTM2,response2,modelType = "enet", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_enet26<-generateDictionary(xDTM2,response2,modelType = "enet", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_enet27<-generateDictionary(xDTM2,response2,modelType = "enet", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_enet28<-generateDictionary(xDTM2,response2,modelType = "enet", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_enet29<-generateDictionary(xDTM2,response2,modelType = "enet", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
dict_enet210<-generateDictionary(xDTM2,response2,modelType = "enet", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
summary(dict_enet21)
summary(dict_enet22)
summary(dict_enet23)
summary(dict_enet24)
summary(dict_enet25)
summary(dict_enet26)
summary(dict_enet27)
summary(dict_enet28)
summary(dict_enet29)
summary(dict_enet210)
write(dict_enet25, "dictionarys/enet-2level.dict")
summary(dict_enet25)
plot(dict_enet25)
dict_ridge2<-generateDictionary(xDTM2,response2,modelType = "ridge", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
summary(dict_ridge2)
dict_ridge2<-generateDictionary(xDTM2,response2,modelType = "ridge", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
summary(dict_ridge2)
write(dict_ridge2, "dictionarys/ridge-2level.dict")
