ggplot(twitter_data_quotes,twitter_data_replies,twitter_data_retweets+aes())
ggplot(twitter_data_quotes,twitter_data_replies,twitter_data_retweets)+aes()
pplot <-ggplot(ddf,x=group, y=mean, aes(group,mean,fill=time))
pplot <-ggplot(twitter_data_sample%>%filter(inReplyToUser!='null'),x=group, y=mean, aes(group,mean,fill=time))
pplot +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymax = mean + se, ymin= mean - se), position = position_dodge(width=0.7), width=0.2) +
#geom_point(stat="identity", shape=21, size=5, position=position_dodge(width=0.7), width=0.2)
geom_point(stat="identity", shape=21, size=5, position=position_dodge(width=0.7))
p <-ggplot(twitter_data_sample%>%filter(isQuote==1), aes(class))
p + geom_bar()
p <-ggplot(twitter_data_sample%>%filter(isQuote==1), aes(isRetweet))
p + geom_bar()
nrow(twitter_data_retweets)
basic <-c("Retweet","Quotes","Answer")
basic
nrow(twitter_data_retweets)
values <-c(twitter_data_retweets,twitter_data_quotes,twitter_data_replies)
values
values <-c(nrow(twitter_data_retweets),nrow(twitter_data_quotes),nrow(twitter_data_replies))
values
basic_plot_data<-data.frame(basic,values)
basic_plot <- ggplot(basic_plot_data, aes(basic,values))
basic_plot <- ggplot(basic_plot_data, aes(basic,values)) + geom_bar()
basic_plot
basic_plot <- ggplot(basic_plot_data, aes(values,basic)) + geom_bar()
basic_plot
basic_plot <- ggplot(basic_plot_data, aes(values,basic))
basic_plot +geom_bar()
basic_plot <- ggplot(basic_plot_data, aes(y = values,x =basic))
basic_plot +geom_bar()
basic_plot +geom_bar(stat = "identity")
basic_plot +geom_bar(stat = "identity") + labs(x = "")
basic_plot +geom_bar(stat = "identity") + labs(x = "", y="Count of tweets")
basic_plot +geom_bar(stat = "identity") + labs(x = "", y="count of tweets")
basic_plot +geom_bar(stat = "identity", fill='#890E1C') + labs(x = "", y="count of tweets")
View(twitter_data)
# Timeline Tweets weeksTillElection
twitter_data_timeline<-twitter_data_sample%>%select(ID, party, retweetCount, weeksTillElection)
twitter_data_timeline<-twitter_data_timeline[order(twitter_data_timeline$weeksTillElection, decreasing=TRUE),]
twitter_data_timeline<-twitter_data_timeline%>%
group_by(party, weeksTillElection)%>%
summarise(count=n(),retweetCount=sum(retweetCount))
ggplot(twitter_data_timeline,aes(x=weeksTillElection,y=count))+
geom_bar(stat="identity")+
ylab("Anzahl Tweets")+
xlab("Wochen bis zur Wahl")
ggplot(twitter_data_timeline,aes(x=weeksTillElection,y=retweetCount))+
geom_bar(stat="identity", fill='#890E1C')+
ylab("Anzahl Retweets")+
xlab("Wochen bis zur Wahl")
ggplot(twitter_data_timeline,aes(x=weeksTillElection,y=count))+
geom_bar(stat="identity" ,fill='#890E1C')+
ylab("Anzahl Tweets")+
xlab("Wochen bis zur Wahl")
ggplot(twitter_data_timeline,aes(x=weeksTillElection,y=count))+
geom_bar(stat="identity" ,fill='#890E1C')+
ylab("count of tweets")+
xlab("Weeks until election")
ggplot(twitter_data_timeline,aes(x=weeksTillElection,y=count))+
geom_bar(stat="identity" ,fill='#890E1C')+
ylab("count of tweets")+
xlab("weeks until election")
twitter_data_timeline_afd<-twitter_data_timeline%>%filter(party=='AfD')
plot_timeline_afd<-ggplot(twitter_data_timeline_afd,aes(x=weeksTillElection,y=count))+
geom_bar(stat="identity")+
ylab("Anzahl Tweets")+
xlab("Wochen bis zur Wahl")+
labs(title="AfD")
twitter_data_timeline_spd<-twitter_data_timeline%>%filter(party=='SPD')
plot_timeline_spd<-ggplot(twitter_data_timeline_spd,aes(x=weeksTillElection,y=count))+
geom_bar(stat="identity")+
ylab("Anzahl Tweets")+
xlab("Wochen bis zur Wahl")+
labs(title="SPD")
twitter_data_timeline_cdu<-twitter_data_timeline%>%filter(party=='CDU')
plot_timeline_cdu<-ggplot(twitter_data_timeline_cdu,aes(x=weeksTillElection,y=count))+
geom_bar(stat="identity")+
ylab("Anzahl Tweets")+
xlab("Wochen bis zur Wahl")+
labs(title="CDU")
twitter_data_timeline_csu<-twitter_data_timeline%>%filter(party=='CSU')
plot_timeline_csu<-ggplot(twitter_data_timeline_csu,aes(x=weeksTillElection,y=count))+
geom_bar(stat="identity")+
ylab("Anzahl Tweets")+
xlab("Wochen bis zur Wahl")+
labs(title="CSU")
twitter_data_timeline_linke<-twitter_data_timeline%>%filter(party=='DIE LINKE')
plot_timeline_linke<-ggplot(twitter_data_timeline_linke,aes(x=weeksTillElection,y=count))+
geom_bar(stat="identity")+
ylab("Anzahl Tweets")+
xlab("Wochen bis zur Wahl")+
labs(title="Die Linke")
twitter_data_timeline_gruene<-twitter_data_timeline%>%filter(party=='GRUENE')
plot_timeline_gruene<-ggplot(twitter_data_timeline_gruene,aes(x=weeksTillElection,y=count))+
geom_bar(stat="identity")+
ylab("Anzahl Tweets")+
xlab("Wochen bis zur Wahl")+
labs(title="Grüne")
twitter_data_timeline_fdp<-twitter_data_timeline%>%filter(party=='FDP')
plot_timeline_fdp<-ggplot(twitter_data_timeline_fdp,aes(x=weeksTillElection,y=count))+
geom_bar(stat="identity")+
ylab("Anzahl Tweets")+
xlab("Wochen bis zur Wahl")+
labs(title="FDP")
grid.arrange(plot_timeline_afd,
plot_timeline_gruene,
plot_timeline_spd,
plot_timeline_cdu,
plot_timeline_csu,
plot_timeline_linke,
plot_timeline_fdp)
plot_timeline_fdp<-ggplot(twitter_data_timeline_fdp,aes(x=weeksTillElection,y=count))+
geom_bar(stat="identity", fill="yellow")+
ylab("Anzahl Tweets")+
xlab("Wochen bis zur Wahl")+
labs(title="FDP")
grid.arrange(plot_timeline_afd,
plot_timeline_gruene,
plot_timeline_spd,
plot_timeline_cdu,
plot_timeline_csu,
plot_timeline_linke,
plot_timeline_fdp)
plot_timeline_gruene<-ggplot(twitter_data_timeline_gruene,aes(x=weeksTillElection,y=count))+
geom_bar(stat="identity", fill="green")+
ylab("Anzahl Tweets")+
xlab("Wochen bis zur Wahl")+
labs(title="Grüne")
plot_timeline_linke<-ggplot(twitter_data_timeline_linke,aes(x=weeksTillElection,y=count))+
geom_bar(stat="identity", fill="darkred")+
ylab("Anzahl Tweets")+
xlab("Wochen bis zur Wahl")+
labs(title="Die Linke")
plot_timeline_csu<-ggplot(twitter_data_timeline_csu,aes(x=weeksTillElection,y=count))+
geom_bar(stat="identity", fill="black")+
ylab("Anzahl Tweets")+
xlab("Wochen bis zur Wahl")+
labs(title="CSU")
plot_timeline_cdu<-ggplot(twitter_data_timeline_cdu,aes(x=weeksTillElection,y=count))+
geom_bar(stat="identity", fill="black")+
ylab("Anzahl Tweets")+
xlab("Wochen bis zur Wahl")+
labs(title="CDU")
plot_timeline_spd<-ggplot(twitter_data_timeline_spd,aes(x=weeksTillElection,y=count))+
geom_bar(stat="identity", fill="red")+
ylab("Anzahl Tweets")+
xlab("Wochen bis zur Wahl")+
labs(title="SPD")
plot_timeline_afd<-ggplot(twitter_data_timeline_afd,aes(x=weeksTillElection,y=count))+
geom_bar(stat="identity", fill="lightblue")+
ylab("Anzahl Tweets")+
xlab("Wochen bis zur Wahl")+
labs(title="AfD")
grid.arrange(plot_timeline_afd,
plot_timeline_gruene,
plot_timeline_spd,
plot_timeline_cdu,
plot_timeline_csu,
plot_timeline_linke,
plot_timeline_fdp)
#CSU aus Grid entfern für bessere 3x2 Darstellung, sehr geringes Tweetvolume
grid.arrange(plot_timeline_afd,
plot_timeline_gruene,
plot_timeline_spd,
plot_timeline_cdu,
plot_timeline_linke,
plot_timeline_fdp)
plot_timeline_afd<-ggplot(twitter_data_timeline_afd,aes(x=weeksTillElection,y=count))+
geom_bar(stat="identity", fill="blue")+
ylab("Anzahl Tweets")+
xlab("Wochen bis zur Wahl")+
labs(title="AfD")
#CSU aus Grid entfern für bessere 3x2 Darstellung, sehr geringes Tweetvolume
grid.arrange(plot_timeline_afd,
plot_timeline_gruene,
plot_timeline_spd,
plot_timeline_cdu,
plot_timeline_linke,
plot_timeline_fdp)
plot_timeline_linke<-ggplot(twitter_data_timeline_linke,aes(x=weeksTillElection,y=count))+
geom_bar(stat="identity", fill="ping")+
ylab("Anzahl Tweets")+
xlab("Wochen bis zur Wahl")+
labs(title="Die Linke")
plot_timeline_linke<-ggplot(twitter_data_timeline_linke,aes(x=weeksTillElection,y=count))+
geom_bar(stat="identity", fill="pink")+
ylab("Anzahl Tweets")+
xlab("Wochen bis zur Wahl")+
labs(title="Die Linke")
#CSU aus Grid entfern für bessere 3x2 Darstellung, sehr geringes Tweetvolume
grid.arrange(plot_timeline_afd,
plot_timeline_gruene,
plot_timeline_spd,
plot_timeline_cdu,
plot_timeline_linke,
plot_timeline_fdp)
geom_bar(stat="identity", fill=#FF3399)+
plot_timeline_linke<-ggplot(twitter_data_timeline_linke,aes(x=weeksTillElection,y=count))+
geom_bar(stat="identity", fill='#FF3399')+
ylab("Anzahl Tweets")+
xlab("Wochen bis zur Wahl")+
labs(title="Die Linke")
#CSU aus Grid entfern für bessere 3x2 Darstellung, sehr geringes Tweetvolume
grid.arrange(plot_timeline_afd,
plot_timeline_gruene,
plot_timeline_spd,
plot_timeline_cdu,
plot_timeline_linke,
plot_timeline_fdp)
#CSU aus Grid entfern für bessere 3x2 Darstellung, sehr geringes Tweetvolume
grid.arrange(plot_timeline_afd,
plot_timeline_gruene,
plot_timeline_spd,
plot_timeline_cdu,
plot_timeline_linke,
plot_timeline_fdp)
plot_timeline_linke<-ggplot(twitter_data_timeline_linke,aes(x=weeksTillElection,y=count))+
geom_bar(stat="identity", fill='#FF3399')+
ylab("Anzahl Tweets")+
xlab("Wochen bis zur Wahl")+
labs(title="Die Linke")
#CSU aus Grid entfern für bessere 3x2 Darstellung, sehr geringes Tweetvolume
grid.arrange(plot_timeline_afd,
plot_timeline_gruene,
plot_timeline_spd,
plot_timeline_cdu,
plot_timeline_linke,
plot_timeline_fdp)
twitter_data_timeline_afd<-twitter_data_timeline%>%filter(party=='AfD')
plot_timeline_afd<-ggplot(twitter_data_timeline_afd,aes(x=weeksTillElection,y=count))+
geom_bar(stat="identity", fill="blue")+
ylab("count of tweets")+
xlab("weeks until election")+
labs(title="AfD")
twitter_data_timeline_spd<-twitter_data_timeline%>%filter(party=='SPD')
plot_timeline_spd<-ggplot(twitter_data_timeline_spd,aes(x=weeksTillElection,y=count))+
geom_bar(stat="identity", fill="red")+
ylab("count of tweets")+
xlab("weeks until election")+
labs(title="SPD")
twitter_data_timeline_cdu<-twitter_data_timeline%>%filter(party=='CDU')
plot_timeline_cdu<-ggplot(twitter_data_timeline_cdu,aes(x=weeksTillElection,y=count))+
geom_bar(stat="identity", fill="black")+
ylab("count of tweets")+
xlab("weeks until election")+
labs(title="CDU")
twitter_data_timeline_csu<-twitter_data_timeline%>%filter(party=='CSU')
plot_timeline_csu<-ggplot(twitter_data_timeline_csu,aes(x=weeksTillElection,y=count))+
geom_bar(stat="identity", fill="black")+
ylab("count of tweets")+
xlab("weeks until election")+
labs(title="CSU")
twitter_data_timeline_linke<-twitter_data_timeline%>%filter(party=='DIE LINKE')
plot_timeline_linke<-ggplot(twitter_data_timeline_linke,aes(x=weeksTillElection,y=count))+
geom_bar(stat="identity", fill='#FF3399')+
ylab("count of tweets")+
xlab("weeks until election")+
labs(title="Die Linke")
twitter_data_timeline_gruene<-twitter_data_timeline%>%filter(party=='GRUENE')
plot_timeline_gruene<-ggplot(twitter_data_timeline_gruene,aes(x=weeksTillElection,y=count))+
geom_bar(stat="identity", fill="green")+
ylab("count of tweets")+
xlab("weeks until election")+
labs(title="Grüne")
twitter_data_timeline_fdp<-twitter_data_timeline%>%filter(party=='FDP')
plot_timeline_fdp<-ggplot(twitter_data_timeline_fdp,aes(x=weeksTillElection,y=count))+
geom_bar(stat="identity", fill="yellow")+
ylab("count of tweets")+
xlab("weeks until election")+
labs(title="FDP")
#CSU aus Grid entfern für bessere 3x2 Darstellung, sehr geringes Tweetvolume
grid.arrange(plot_timeline_afd,
plot_timeline_gruene,
plot_timeline_spd,
plot_timeline_cdu,
plot_timeline_linke,
plot_timeline_fdp)
ggplot(twitter_data_timeline,aes(x=weeksTillElection,y=count))+
geom_bar(stat="identity" ,fill='#890E1C')+
ylab("count of tweets")+
xlab("weeks until election")
View(twitter_data_cleaned)
View(twitter_data_cleaned1)
twitter_data_sentiment<-read_delim("twitter data/SentimentAnalyse#1.csv",";"
,escape_double = FALSE, trim_ws =TRUE,
locale = locale())
twitter_data_sentiment_david_snd<-read_delim("data/SentimentAnalyseDavidzweiterDurchlauf.csv",";"
,escape_double = FALSE, trim_ws =TRUE,
locale = locale())
twitter_data_sentiment_jakob_snd<-read_delim("twitter data/SentimentAnalyse#2.csv",
";", escape_double = FALSE, trim_ws = TRUE,
locale = locale())
View(twitter_data_sentiment)
twitter_data_sentiment<-rbind(twitter_data_sentiment,twitter_data_sentiment_jakob_snd,twitter_data_sentiment_david_snd)
#temp Plot für Paper
values <-c(twitter_data_sentiment%>%filter(isMatch="1"))
#temp Plot für Paper
values <-c(twitter_data_sentiment%>%filter(isMatch=="1"))
View(values)
#temp Plot für Paper
values <-c(nrow(twitter_data_sentiment%>%filter(isMatch=="1")))
values
go <-c("matched","polarity matched","not matched")
#temp Plot für Paper
values <-c(nrow(twitter_data_sentiment%>%filter(isMatch=="1")), nrow(twitter_data_sentiment%>%filter(isMatch=="0.5")))
values
#temp Plot für Paper
values <-c(nrow(twitter_data_sentiment%>%filter(isMatch=="1")), nrow(twitter_data_sentiment%>%filter(isMatch=="0.5")), nrow(twitter_data_sentiment
%>%filter(isMatch=="0")))
values
go <-c("matched","polarity matched","not matched")
basic_plot_data<-data.frame(go,values)
basic_plot <- ggplot(basic_plot_data, aes(y = values,x =go))
basic_plot +geom_bar(stat = "identity", fill='#890E1C') + labs(x = "", y="count of tweets")
#temp Plot für Paper
values <-c(nrow(twitter_data_sentiment%>%filter(isMatch=="1")), nrow(twitter_data_sentiment%>%filter(isMatch=="0")), nrow(twitter_data_sentiment
%>%filter(isMatch=="0.5")))
go <-c("matched","polarity matched","not matched")
#temp Plot für Paper
values <-c(nrow(twitter_data_sentiment%>%filter(isMatch=="1")), nrow(twitter_data_sentiment%>%filter(isMatch=="0.5")), nrow(twitter_data_sentiment
%>%filter(isMatch=="0")))
go <-c("matched","polarity matched","not matched")
values
go <-c("matched","polarity matched","not matched")
basic_plot_data<-data.frame(go,values)
basic_plot <- ggplot(basic_plot_data, aes(y = values,x =go))
basic_plot +geom_bar(stat = "identity", fill='#890E1C') + labs(x = "", y="count of tweets")
colnames(twitter_data_sentiment_david_snd)<-c("sentimentScore","text")
twitter_data_sentiment<-twitter_data_sentiment%>%select(-c(ID))
twitter_data_sentiment_jakob_snd<-twitter_data_sentiment_jakob_snd%>%select(-c(X1,ID,positveSentimentScore,negativeSentimentScore))
twitter_data_sentiment_jakob_snd<-twitter_data_sentiment_jakob_snd%>%filter(sentimentScore != "NA")
twitter_data_sentiment_jakob_snd$isMatch<-"1"
twitter_data_sentiment_david_snd$isMatch<-"1"
twitter_data_sentiment<-rbind(twitter_data_sentiment,twitter_data_sentiment_jakob_snd,twitter_data_sentiment_david_snd)
twitter_data_sentiment<-twitter_data_sentiment%>%mutate(text=cleanTweetText(text))
# Umwandeln der Scores in numeric mit "."
twitter_data_sentiment<-twitter_data_sentiment%>%filter(sentimentScore != "NA")
twitter_data_sentiment<-twitter_data_sentiment%>%filter(text != "")
twitter_data_sentiment<-twitter_data_sentiment%>%mutate(sentimentScore = sub(",", ".", sentimentScore, fixed = TRUE))
twitter_data_sentiment$sentimentScore<-as.numeric(as.character(twitter_data_sentiment$sentimentScore))
require(tidyverse)
require(dplyr)
require(plyr)
library(readr)
library(SentimentAnalysis)
library(SnowballC)
library(tm)
library(spikeslab)
source("r scripts/cleanTweetText.R")
setwd("C:/Users/David/Downloads/Uni/CSS/projekt/CSS-WS17-18-master")
dict_ridge-2level <-read("dictionarys/ridge-2leve.dict")
dict_ridge-2level <-read("dictionarys\ridge-2level.dict")
dict_ridge_2level <-read("dictionarys\ridge-2level.dict")
dict_ridge_2level <-read("dictionarys/ridge-2level.dict")
summary(dict_ridge_2level)
dict_ridge_3level <-read("dictionarys/ridge-3level.dict")
dict_ridge_5level <-read("dictionarys/ridge-5level.dict")
compareDictionaries(dict_ridge_level3,dict_ridge_level5)
compareDictionaries(dict_ridge_2level,dict_ridge_3level)
compareDictionaries(dict_ridge_2level,dict_ridge_3level)
compareDictionaries(dict_ridge_2level,dict_ridge_5level)
compareDictionaries(dict_ridge_2level,dict_ridge_3level)
compareDictionaries(dict_ridge_3level, dict_ridge_5level)
summary(dict_ridge_2level)
summary(dict_ridge_3level)
summary(dict_ridge_5level)
compareDictionaries(dict_ridge_2level,dict_ridge_3level)
compareDictionaries(dict_ridge_3level,dict_ridge_2level)
compareDictionaries(dict_ridge_2level,dict_ridge_5level)
compareDictionaries(dict_ridge_3level, dict_ridge_5level)
dict_lasso_2level <-read("dictionarys/lasso-2level.dict")
dict_lasso_3level <-read("dictionarys/lasso-3level.dict")
dict_lasso_5level <-read("dictionarys/lasso-5level.dict")
summary(dict_lasso_5level)
summary(dict_lasso_2level)
summary(dict_lasso_3level)
summary(dict_lasso_2level)
summary(dict_lasso_3level)
summary(dict_lasso_5level)
compareDictionaries(dict_lasso_2level,dict_lasso_5level)
compareDictionaries(dict_lasso_3level,dict_lasso_2level)
compareDictionaries(dict_lasso_3level,dict_lasso_5level)
dict_enet_2level <-read("dictionarys/enet-2level.dict")
dict_enet_3level <-read("dictionarys/enet-3level.dict")
dict_enet_5level <-read("dictionarys/enet-5level.dict")
summary(dict_enet_2level)
summary(dict_enet_3level)
summary(dict_enet_5level)
twitter_data_sentiment<-read_delim("twitter data/SentimentAnalyse#1.csv",";"
,escape_double = FALSE, trim_ws =TRUE,
locale = locale())
twitter_data_sentiment_david_snd<-read_delim("data/SentimentAnalyseDavidzweiterDurchlauf.csv",";"
,escape_double = FALSE, trim_ws =TRUE,
locale = locale())
twitter_data_sentiment_jakob_snd<-read_delim("twitter data/SentimentAnalyse#2.csv",
";", escape_double = FALSE, trim_ws = TRUE,
locale = locale())
colnames(twitter_data_sentiment_david_snd)<-c("sentimentScore","text")
twitter_data_sentiment<-twitter_data_sentiment%>%select(-c(ID))
twitter_data_sentiment_jakob_snd<-twitter_data_sentiment_jakob_snd%>%select(-c(X1,ID,positveSentimentScore,negativeSentimentScore))
twitter_data_sentiment_jakob_snd<-twitter_data_sentiment_jakob_snd%>%filter(sentimentScore != "NA")
twitter_data_sentiment_jakob_snd$isMatch<-"1"
twitter_data_sentiment_david_snd$isMatch<-"1"
#temp Plot für Paper
values <-c(nrow(twitter_data_sentiment%>%filter(isMatch=="1")), nrow(twitter_data_sentiment%>%filter(isMatch=="0.5")), nrow(twitter_data_sentiment
%>%filter(isMatch=="0")))
twitter_data_sentiment<-rbind(twitter_data_sentiment,twitter_data_sentiment_jakob_snd,twitter_data_sentiment_david_snd)
twitter_data_sentiment<-twitter_data_sentiment%>%mutate(text=cleanTweetText(text))
# Umwandeln der Scores in numeric mit "."
twitter_data_sentiment<-twitter_data_sentiment%>%filter(sentimentScore != "NA")
twitter_data_sentiment<-twitter_data_sentiment%>%filter(text != "")
twitter_data_sentiment<-twitter_data_sentiment%>%mutate(sentimentScore = sub(",", ".", sentimentScore, fixed = TRUE))
twitter_data_sentiment$sentimentScore<-as.numeric(as.character(twitter_data_sentiment$sentimentScore))
# Stemming
twitter_data_sentiment$text<-apply(twitter_data_sentiment[,"text"],1,function(x) stemTweetText(x))
# Nur Matches der Kreuzvalid.
twitter_data_sentiment_match<-twitter_data_sentiment%>%filter(isMatch =="1")
twitter_data_sentiment_5lvl<-twitter_data_sentiment_match
twitter_data_sentiment_5lvl<-twitter_data_sentiment_5lvl%>%select("sentimentScore", "text")
response5<-twitter_data_sentiment_5lvl$sentimentScore
x5<-transformIntoCorpus(twitter_data_sentiment_5lvl$text)
xDTM5<-toDocumentTermMatrix(x5, language = "german", minWordLength = 3,
sparsity = NULL, removeStopwords = TRUE, stemming = FALSE)
#1024
dict_lasso5<-generateDictionary(xDTM5,response5,modelType = "lasso", sparsity = 0.99999999, language = "german")
summary(dict_lasso5)
View(ridge_5lvl)
View(twitter_data_sentiment_5lvl)
#6235
dict_ridge5<-generateDictionary(xDTM5,response5,modelType = "ridge", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
summary(dict_ridge5)
plot(dict_lasso5)
twitter_data_sentiment_3lvl<-twitter_data_sentiment_match%>%mutate(sentimentScore = sub("0.5","1.0", sentimentScore, fixed = TRUE))
twitter_data_sentiment_3lvl<-twitter_data_sentiment_3lvl%>%select("sentimentScore", "text")
twitter_data_sentiment_3lvl$sentimentScore<-as.numeric(as.character(twitter_data_sentiment_3lvl$sentimentScore))
x3<-transformIntoCorpus(twitter_data_sentiment_3lvl$text)
response3<-twitter_data_sentiment_3lvl$sentimentScore
#1241
dict_lasso3<-generateDictionary(xDTM3,response3,modelType = "lasso", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
xDTM3<-toDocumentTermMatrix(x3, language = "german", minWordLength = 3,
sparsity = NULL, removeStopwords = TRUE, stemming = FALSE)
response3<-twitter_data_sentiment_3lvl$sentimentScore
#1241
dict_lasso3<-generateDictionary(xDTM3,response3,modelType = "lasso", filterTerms = NULL, control = list(), sparsity = 0.99999999, language = "german")
summary(dict_lasso3)
compareDictionaries(dict_enet_2level,dict_enet_5level)
compareDictionaries(dict_enet_2level,dict_enet_5level)
compareDictionaries(dict_enet_3level,dict_enet_2level)
compareDictionaries(dict_enet_3level,dict_enet_5level)
require(tidyverse)
require(dplyr)
require(plyr)
library(readr)
library(SentimentAnalysis)
library(SnowballC)
library(tm)
library(spikeslab)
twitter_data_sentiment<-read_delim("twitter data/SentimentAnalyse#1.csv",";"
,escape_double = FALSE, trim_ws =TRUE,
locale = locale())
twitter_data_sentiment_david_snd<-read_delim("data/SentimentAnalyseDavidzweiterDurchlauf.csv",";"
,escape_double = FALSE, trim_ws =TRUE,
locale = locale())
twitter_data_sentiment_jakob_snd<-read_delim("twitter data/SentimentAnalyse#2.csv",
";", escape_double = FALSE, trim_ws = TRUE,
locale = locale())
colnames(twitter_data_sentiment_david_snd)<-c("sentimentScore","text")
twitter_data_sentiment<-twitter_data_sentiment%>%select(-c(ID))
twitter_data_sentiment_jakob_snd<-twitter_data_sentiment_jakob_snd%>%select(-c(X1,ID,positveSentimentScore,negativeSentimentScore))
twitter_data_sentiment_jakob_snd<-twitter_data_sentiment_jakob_snd%>%filter(sentimentScore != "NA")
twitter_data_sentiment_jakob_snd$isMatch<-"1"
twitter_data_sentiment_david_snd$isMatch<-"1"
twitter_data_sentiment<-rbind(twitter_data_sentiment,twitter_data_sentiment_jakob_snd,twitter_data_sentiment_david_snd)
twitter_data_sentiment<-twitter_data_sentiment%>%mutate(text=cleanTweetText(text))
# Umwandeln der Scores in numeric mit "."
twitter_data_sentiment<-twitter_data_sentiment%>%filter(sentimentScore != "NA")
twitter_data_sentiment<-twitter_data_sentiment%>%filter(text != "")
twitter_data_sentiment<-twitter_data_sentiment%>%mutate(sentimentScore = sub(",", ".", sentimentScore, fixed = TRUE))
twitter_data_sentiment$sentimentScore<-as.numeric(as.character(twitter_data_sentiment$sentimentScore))
# Nur Matches der Kreuzvalid.
twitter_data_sentiment_match<-twitter_data_sentiment%>%filter(isMatch =="1")
twitter_data_sentiment_5lvl<-twitter_data_sentiment_match
twitter_data_sentiment_5lvl<-twitter_data_sentiment_5lvl%>%select("sentimentScore", "text")
response5<-twitter_data_sentiment_5lvl$sentimentScore
x5<-transformIntoCorpus(twitter_data_sentiment_5lvl$text)
xDTM5<-toDocumentTermMatrix(x5, language = "german", minWordLength = 3,
sparsity = 0.99999999, removeStopwords = TRUE, stemming = FALSE)
#1024
dict_lasso5<-generateDictionary(xDTM5,response5,modelType = "lasso", sparsity = 0.99999999, language = "german")
summary(dict_lasso5)
#Test
test_dict <- generateDictionary(x5,response= response5x, modelType = "lasso", sparsity = 0.9999999, weighting = function(x))
#Test
test_dict <- generateDictionary(x5,response= response5x, modelType = "lasso", sparsity = 0.9999999, weighting = function(x)
#Test
test_dict <- generateDictionary(x5,response= response5x, modelType = "lasso", sparsity = 0.9999999)
test_dict
#Test
test_dict <- generateDictionary(x5,response5, modelType = "lasso", sparsity = 0.9999999)
test_dict
#Test
test_dict <- generateDictionary(x5,response5, modelType = "lasso", sparsity = 0.9999999, weighting = function(x) tm::weightTfIdf(x, normalize =
FALSE))
summary(test_dict)
#Test
test_dict <- generateDictionary(x5,response5, modelType = "lasso", sparsity = 0.9999999,
weighting = function(x) tm::weightTfIdf(x, normalize=TRUE))
summary(test_dict)
#1024
dict_lasso5<-generateDictionary(xDTM5,response5,modelType = "lasso", sparsity = 0.99999999, language = "german")
compareDictionaries(dict_lasso5,test_dict)
